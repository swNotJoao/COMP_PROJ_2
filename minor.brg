%{
/*
 * selecção de instruções com postfix
 */
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>
#include <string.h>
#include "node.h"
#include "postfix.h"
#include "y.tab.h"
#include "tabid.h"
#include "minor.h"

#ifndef U_
#define U_ "_"
#endif

#define TRACE
static void yytrace(NODEPTR_TYPE p, int eruleno, int cost, int bestcost);

int lbl;
int tmpStrInd = 0, eqintsind = 0;
char tmpStr[1024];
int eqints[1024];
int fvarspos=0;
char *toPrint = NULL;

static char *extrns[100]; /* emit externs at the end only */
static int extcnt;

extern FILE *yyout;
static char *mklbl(int n) {
	static char buf[20];
	sprintf(buf, "%cL%d", n < 0 ? '.' : '_', n);
	return strcpy(malloc(strlen(buf)+1),buf);
}

static void outstr(char *s) {
  while (*s) fprintf(yyout, pfCHAR, (unsigned char)*s++);
  fprintf(yyout, pfCHAR, 0);
}

static char *mkpowlbl(char *s) {
static char buf[80];
strcpy(buf, "_");
strcat(buf, s);
return buf;
}

static char *mkfunc(char *s) {
	static char buf[80];
	strcpy(buf, "_");
	strcat(buf, s);
	return buf;
}
%}
%term STMT=';' PSTMT='!' READOP='?' AND='&' OR='|' IND='['
%term POW='^' ADD='+' SUB='-' MUL='*' DIV='/' MOD='%' NOT='~' LT='<' GT='>' ISEQ='='
%include "y.tab.h"

%%
file : PROGRAM(decls, main) 1 {}

decls : NIL {}
decls : VAR(ARRAY(ID, INTS(INT, NIL))) { fprintf(yyout, pfDATA pfLABEL,
                                         p->SUB(0)->SUB(0)->value.s);
                                         for(i = 0; i<p->SUB(0)->SUB(1)->SUB(0)->value.i; i++)
                                          fprintf(yyout, pfINTEGER, 0);
                                        }
decls : VAR(ARRAY(ID, INTS(INT, eqints))) { fprintf(yyout, pfDATA pfLABEL,
                                         p->SUB(0)->SUB(0)->value.s);
                                         for(i = 0; i<p->SUB(0)->SUB(1)->SUB(0)->value.i; i++)
                                          fprintf(yyout, pfINTEGER, eqints[i]);
                                          eqintsind = 0;
                                        }
decls : VAR(ARRAY(ID, INTS(INT, INT))) { fprintf(yyout, pfDATA pfLABEL,
                                         p->SUB(0)->SUB(0)->value.s);
                                         for(i = 0; i<p->SUB(0)->SUB(1)->SUB(0)->value.i; i++)
                                          fprintf(yyout, pfINTEGER, p->SUB(0)->SUB(1)->SUB(1)->value.i);
                                        }
eqints : INTS(eqints, INT) {eqints[eqintsind++] = p->SUB(1)->value.i;}
eqints: INTS(INT, INT) {eqints[eqintsind++] = p->SUB(0)->value.i;
                        eqints[eqintsind++] = p->SUB(1)->value.i;}

decls : VAR(NUMBER(ID, INT)) {
                              fprintf(yyout, pfDATA pfLABEL pfINTEGER,
                              p->SUB(0)->SUB(0)->value.s,
                              p->SUB(0)->SUB(1)->value.i);
                             }
decls : VAR(NUMBER(ID, NIL)) {fprintf(yyout, pfDATA pfLABEL pfINTEGER, p->SUB(0)->SUB(0)->value.s, 0);}
decls : VAR(STRING(ID, chars)) {
                                tmpStr[tmpStrInd++] = '\0'; toPrint = tmpStr;
                                fprintf(yyout, pfRODATA pfALIGN pfLABEL
                                , p->SUB(0)->SUB(0)->value.s);
                                outstr(toPrint);
                                tmpStrInd = 0;
                               }
decls : DECL(decls, decls) {fprintf(yyout, pfTEXT);}

main : FUNCTION(END, instrs) {}

instrs : FARGS(NIL, instr) {}

instr : START(fvars, instr) {}
instr : START(NIL, instr) {}

fvars : ARGS(NIL, fvars) {fvarspos = 0;}
fvars : fvar {}
fvar : NUMBER(ID, NIL) {fvarspos-=4;
                        p->SUB(0)->value.i = fvarspos;
                        p->SUB(0)->info = 0;
                        fprintf(yyout, "sub esp, 4\n");}

fvar : ARRAY(ID, INTS(INT, NIL)) {fprintf(yyout, pfDATA pfLABEL,
                                   p->SUB(0)->value.s);
                                   for(i = 0; i<p->SUB(1)->SUB(0)->value.i; i++)
                                    fprintf(yyout, pfINTEGER, 0);
                                    fprintf(yyout, pfTEXT);
                                  }

instr : NIL
instr : STMT(NIL, instr)
instr : STMT(instr, instr)
instr : print
instr : expr

instr:	FI(THEN(if, elif), instr)	1 { fprintf(yyout, pfLABEL,
                                      mklbl(LEFT_CHILD(p)->SUB(0)->place)); }
elif : ELIF(elif, if) { p->place = ++lbl; fprintf(yyout, pfJMP pfLABEL,
				                mklbl(RIGHT_CHILD(p)->place), mklbl(p->place)); }
elif : NIL 2 {}

instr:	FI(THEN(if, NIL), instr)	1 { fprintf(yyout, pfLABEL,
                                      mklbl(LEFT_CHILD(p)->SUB(0)->place)); }
if: IF(cond,instr) {p->place = ++lbl; fprintf(yyout, pfJMP pfLABEL,
				            mklbl(p->place), mklbl(LEFT_CHILD(p)->place)); }

instr : FI(THEN(instr, NIL), NIL) {/*Simple if*/}
instr:	IF(cond,instr)	1 { fprintf(yyout, pfLABEL, mklbl(LEFT_CHILD(p)->place)); }
cond:	expr		1 { p->place = ++lbl; fprintf(yyout, pfJZ, mklbl(p->place)); }

print : PSTMT(ID) 1{
                  switch(p->SUB(0)->info){
                    case tINT:
                      fprintf(yyout, pfADDRV pfCALL pfTRASH,
                      p->SUB(0)->value.s, "_printi", 4);
                    break;
                    case tSTR:
                      fprintf(yyout, pfADDR pfCALL pfTRASH,
                      p->SUB(0)->value.s, "_prints", 4);
                    break;
                  }
                  }
print : PSTMT(chars) {
                      char *l = mklbl(++lbl); tmpStr[tmpStrInd++] = '\0';
                      fprintf(yyout, pfRODATA pfALIGN pfLABEL, l);
                      outstr(toPrint);
                      fprintf(yyout, pfTEXT pfADDR pfCALL pfTRASH,
                      l, "_prints", 4);
                      tmpStrInd = 0;
                      }
print : PSTMT(expr) 2{fprintf(yyout, pfTEXT pfCALL pfTRASH, "_printi", 4);}
print : PSTMT(CHARS(NIL,INT)) 1{fprintf(yyout, pfTEXT pfIMM pfCALL pfTRASH, p->SUB(0)->SUB(1)->value.i, "_printi", 4);}

chars : CHARS(NIL, chars) 2{}
chars : INT { tmpStr[tmpStrInd++] = p->value.i; toPrint = tmpStr;}
chars : CHAR { tmpStr[tmpStrInd++] = p->value.i; toPrint = tmpStr;}
chars : STR { strcpy(&tmpStr[tmpStrInd], p->value.s); tmpStrInd = tmpStrInd + strlen(p->value.s); toPrint = tmpStr;}
chars : CHARS(chars, chars) {}

expr:	CHARS(NIL, INT)	1 {fprintf(yyout, pfIMM, p->SUB(1)->value.i);}
expr:	CHARS(NIL, CHAR)	1 {fprintf(yyout, pfIMM, p->SUB(1)->value.i); }
expr: ID 1 { fprintf(yyout, pfADDRV, p->value.s); }
expr: READOP {fprintf(yyout, pfCALL pfPUSH, "_readi"); }

expr: ADDR(ID) { fprintf(yyout, pfADDR, p->SUB(0)->value.s); }
expr: ADDR(IND(expr, ID)) { switch(p->SUB(0)->SUB(1)->info){
                              case tINT:
                                fprintf(yyout, pfIMM pfMUL pfADDR pfADD,
                                4, p->SUB(0)->SUB(1)->value.s);
                              break;
                              case tSTR:
                                fprintf(yyout, pfADDR pfADD,
                                p->SUB(0)->SUB(1)->value.s);
                              break;
                            }}
expr: UMINUS(expr) 1 { fprintf(yyout, pfIMM pfMUL, -1); }
expr:	ADD(expr,expr)	1 { fprintf(yyout, pfADD); }
expr:	SUB(expr,expr)	1 { fprintf(yyout, pfSUB); }
expr:	MUL(expr,expr)	1 { fprintf(yyout, pfMUL); }
expr:	DIV(expr,expr)	1 { fprintf(yyout, pfDIV); }
expr:	MOD(expr,expr)	1 { fprintf(yyout, pfMOD); }
expr:	ISEQ(expr,expr)	1 { fprintf(yyout, pfEQ); }
expr:	NE(expr,expr)	1 { fprintf(yyout, pfNE); }
expr:	LT(expr,expr)	1 { fprintf(yyout, pfLT); }
expr:	LE(expr,expr)	1 { fprintf(yyout, pfLE); }
expr:	GT(expr,expr)	1 { fprintf(yyout, pfGT); }
expr:	GE(expr,expr)	1 { fprintf(yyout, pfGE); }
expr:	AND(and,expr)	1 { fprintf(yyout, pfLABEL, mklbl(LEFT_CHILD(p)->place)); }
and:	expr		1 { p->place = ++lbl; fprintf(yyout, pfDUP pfJZ pfTRASH, mklbl(p->place), pfWORD); }
expr:	OR(or,expr)	1 { fprintf(yyout, pfLABEL, mklbl(LEFT_CHILD(p)->place)); }
or:	expr		1 { p->place = ++lbl; fprintf(yyout, pfDUP pfJNZ pfTRASH, mklbl(p->place), pfWORD); }
expr:	UMINUS(expr)	1 { fprintf(yyout, pfNEG); }
expr:	NOT(expr)	1 { fprintf(yyout, pfIMM pfEQ, 0); }
expr: POW(expr, expr) 1 {lbl++; fprintf(yyout, ";POW\n"
                                                "pop ebx\n"
                                                "pop ecx\n"
                                                "mov eax,1\n"
                                                "%s:\n"
                                                "jcxz %s\n"
                                                "mul ebx\n"
                                                "loop %s\n"
                                                "%s:\n"
                                                "push eax\n",
                                                mklbl(lbl+1), mklbl(lbl),
                                                mklbl(lbl+1), mklbl(lbl));
                                                lbl = lbl + 2;}
expr: EQ(expr, ID) 1 { fprintf(yyout, pfADDRA, p->SUB(1)->value.s); }
expr: IND(expr, ID) 1 { fprintf(yyout, pfIMM pfMUL pfADDR pfADD pfLOAD,
                        4, p->SUB(1)->value.s);  }
expr: EQ(expr, IND(expr, ID)) { fprintf(yyout, pfIMM pfMUL pfADDR pfADD pfSTORE,
                                4, p->SUB(1)->SUB(1)->value.s); }

%%
extern char **yynames;
extern int trace, errors, debugNode;

void externs()
{
  int i;

  for (i = 0; i < extcnt; i++)
    if (extrns[i])
      fprintf(yyout, pfEXTRN, extrns[i]);
}

static int data(int t, char *s, void *a, void *user) {
  if (s) fprintf(yyout, pfLABEL pfINTEGER, s, 0);
  return 1;
}

void evaluate(Node *p) {
	if (errors) return;
	/* if (trace) */ printNode(p, stdout, yynames);
  fprintf(yyout, pfTEXT pfALIGN pfGLOBL pfLABEL pfENTER, "_main", pfFUNC, "_main", 4);
	if (!yyselect(p) && trace) printf("selection successful\n");
  fprintf(yyout, pfIMM pfPOP pfLEAVE pfRET pfDATA, 0);
  /*IDevery(data,0);*/
  fprintf(yyout, pfEXTRN pfEXTRN pfEXTRN pfEXTRN,
  		"_prints", "_printi", "_println", "_readi");
  externs();
}

#ifndef NOTRACE
static void yytrace(NODEPTR_TYPE p, int eruleno, int cost, int bestcost)
{
	int op = OP_LABEL(p);
	YYCONST char *tname = yytermname[op] ? yytermname[op] : "?";
	if (debugNode) fprintf(stderr, "0x%p:%s matched %s with cost %d vs. %d\n", p, tname, yystring[eruleno], cost, bestcost);
	if (cost >= MAX_COST && bestcost >= MAX_COST) {
		fprintf(stderr, "0x%p:%s NO MATCH %s with cost %d vs. %d\n", p, tname, yystring[eruleno], cost, bestcost);
		printNode(p, stderr, yynames);
	}
}
#endif
