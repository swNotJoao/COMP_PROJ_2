%{
/*
 * selecção de instruções com postfix
 */
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>
#include <string.h>
#include "node.h"
#include "postfix.h"
#include "y.tab.h"
#include "minor.h"

#ifndef U_
#define U_ "_"
#endif

#define TRACE
static void yytrace(NODEPTR_TYPE p, int eruleno, int cost, int bestcost);

int lbl;

extern FILE *yyout;
static char *mklbl(int n) {
	static char buf[20];
	sprintf(buf, "%cL%d", n < 0 ? '.' : '_', n);
	return strcpy(malloc(strlen(buf)+1),buf);
}
static char *mkfunc(char *s) {
	static char buf[80];
	strcpy(buf, "_");
	strcat(buf, s);
	return buf;
}
%}
%term STMT=';' PSTMT='!' READOP='?'
%include "y.tab.h"

%%
file: PROGRAM(decls, main) 1 {}

decls: NIL {}

main: FUNCTION(END, instrs) {}

instrs: FARGS(NIL, instr) {}

instr: START(NIL, stat) {}

stat: STMT(stat, stat)
stat: STMT(NIL, stat)
stat: print

print: PSTMT(expr) {}

expr: CHARS(NIL, STR) { char *l = mklbl(++lbl);
			    fprintf(yyout, pfRODATA pfALIGN pfLABEL pfSTR
				pfTEXT pfADDR pfCALL pfCALL pfTRASH,
				l, p->SUB(1)->value.s, l, "_prints", "_println", 4); }

expr: READOP { fprintf(yyout, pfCALL pfPUSH pfADDRA, "_readi", /*p->value.s*/ "readPlace"); }

%%

extern char **yynames;
extern int trace, errors, debugNode;

void evaluate(Node *p) {
	if (errors) return;
	/* if (trace) */ printNode(p, stdout, yynames);
  fprintf(yyout, pfTEXT pfALIGN pfGLOBL pfLABEL, "_main", pfFUNC, "_main");
	if (!yyselect(p) && trace) printf("selection successful\n");
  fprintf(yyout, pfIMM pfPOP pfRET pfDATA, 0);
  /*IDevery(data,0);*/
  fprintf(yyout, pfEXTRN pfEXTRN pfEXTRN pfEXTRN,
  		"_prints", "_printi", "_println", "_readi");
}

#ifndef NOTRACE
static void yytrace(NODEPTR_TYPE p, int eruleno, int cost, int bestcost)
{
	int op = OP_LABEL(p);
	YYCONST char *tname = yytermname[op] ? yytermname[op] : "?";
	if (debugNode) fprintf(stderr, "0x%p:%s matched %s with cost %d vs. %d\n", p, tname, yystring[eruleno], cost, bestcost);
	if (cost >= MAX_COST && bestcost >= MAX_COST) {
		fprintf(stderr, "0x%p:%s NO MATCH %s with cost %d vs. %d\n", p, tname, yystring[eruleno], cost, bestcost);
		printNode(p, stderr, yynames);
	}
}
#endif
