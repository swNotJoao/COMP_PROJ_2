%{
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>
#include <string.h>
#include "node.h"
#include "tabid.h"
#include "postfix.h"

static int sameVar(NODEPTR_TYPE p) {
  return strcmp(LEFT_CHILD(p)->value.s, LEFT_CHILD(RIGHT_CHILD(p))->value.s) ? 0x7fff : 2;
}

#define TRACE
static void yytrace(NODEPTR_TYPE p, int eruleno, int cost, int bestcost);

extern FILE *yyout;
extern int lbl;
extern char *mklbl(int n);
%}
%term LIST=';' ASSIGN='=' ADD='+' SUB='-' MUL='*' DIV='/' MOD='%' LT='<' GT='>'
%include "y.tab.h"
%%
stat:	LIST(stat,stat)	0 { char s[20]; sprintf(s, "line %d", p->line); fprintf(yyout, pfCOMM, s); }
stat:	STRING		9 { char *l = mklbl(++lbl);
			    fprintf(yyout, pfRODATA pfALIGN pfLABEL pfSTR
				pfTEXT pfADDR pfCALL pfCALL pfTRASH,
				l, p->value.s, l, "_prints", "_println", 4); }
stat:	PRINT(reg)	3 { fprintf(yyout, pfCALL pfCALL pfTRASH,
				"_printi", "_println", 4); }
stat:	READ		1 { fprintf(yyout, pfCALL pfPUSH pfADDRA, "_readi", p->value.s); }
stat:	JZ(reg,ETIQ)	1 { fprintf(yyout, pfJZ, p->SUB(1)->value.s); }
stat:	JNZ(reg,ETIQ)	1 { fprintf(yyout, pfJNZ, p->SUB(1)->value.s); }
stat:	JMP		1 { fprintf(yyout, pfJMP, p->value.s); }
stat:	LABEL		  { fprintf(yyout, pfLABEL, p->value.s); }
stat:	ASSIGN(VARIABLE,reg)   1 {
		fprintf(yyout, pfADDRA, p->SUB(0)->value.s); }
stat:	JZ(LT(reg,reg), ETIQ)	1 { fprintf(yyout, pfJGE, p->SUB(1)->value.s); }
stat:	JZ(LE(reg,reg), ETIQ)	1 { fprintf(yyout, pfJGT, p->SUB(1)->value.s); }
stat:	JZ(GT(reg,reg), ETIQ)	1 { fprintf(yyout, pfJLE, p->SUB(1)->value.s); }
stat:	JZ(GE(reg,reg), ETIQ)	1 { fprintf(yyout, pfJLT, p->SUB(1)->value.s); }
stat:	JZ(EQ(reg,reg), ETIQ)	1 { fprintf(yyout, pfJNE, p->SUB(1)->value.s); }
stat:	JZ(NE(reg,reg), ETIQ)	1 { fprintf(yyout, pfJEQ, p->SUB(1)->value.s); }
stat:	JNZ(LT(reg,reg), ETIQ)	1 { fprintf(yyout, pfJLT, p->SUB(1)->value.s); }
stat:	JNZ(LE(reg,reg), ETIQ)	1 { fprintf(yyout, pfJLE, p->SUB(1)->value.s); }
stat:	JNZ(GT(reg,reg), ETIQ)	1 { fprintf(yyout, pfJGT, p->SUB(1)->value.s); }
stat:	JNZ(GE(reg,reg), ETIQ)	1 { fprintf(yyout, pfJGE, p->SUB(1)->value.s); }
stat:	JNZ(EQ(reg,reg), ETIQ)	1 { fprintf(yyout, pfJEQ, p->SUB(1)->value.s); }
stat:	JNZ(NE(reg,reg), ETIQ)	1 { fprintf(yyout, pfJNE, p->SUB(1)->value.s); }

stat:	reg 1 { fprintf(yyout, pfTRASH, 4); }
reg:	VARIABLE 1 { fprintf(yyout, pfADDRV, p->value.s); }
reg:	INTEGER 1 { fprintf(yyout, pfIMM, p->value.i); }
reg:	ADD(reg,reg)	1 { fprintf(yyout, pfADD); }
reg:	SUB(reg,reg)	1 { fprintf(yyout, pfSUB); }
reg:	UMINUS(reg)	1 { fprintf(yyout, pfNEG); } 
reg:	MUL(reg,reg)	1 { fprintf(yyout, pfMUL); }
reg:	DIV(reg,reg)	1 { fprintf(yyout, pfDIV); }
reg:	MOD(reg,reg)	1 { fprintf(yyout, pfMOD); }
reg:	EQ(reg,reg)	1 { fprintf(yyout, pfEQ); }
reg:	NE(reg,reg)	1 { fprintf(yyout, pfNE); }
reg:	LT(reg,reg)	1 { fprintf(yyout, pfLT); }
reg:	LE(reg,reg)	1 { fprintf(yyout, pfLE); }
reg:	GE(reg,reg)	1 { fprintf(yyout, pfGE); }
reg:	GT(reg,reg)	1 { fprintf(yyout, pfGT); }

stat:	ASSIGN(VARIABLE,ADD(VARIABLE,INTEGER))	sameVar {
		fprintf(yyout, pfADDR pfINCR, LEFT_CHILD(p)->value.s, RIGHT_CHILD(RIGHT_CHILD(p))->value.i);
	}
%%
#include "y.tab.h"
extern char **yynames;
extern int trace, errors, debugNode;

static int data(int t, char *s, void *a, void *user) {
  if (s) fprintf(yyout, pfLABEL pfINTEGER, s, 0);
  return 1;
}

void evaluate(Node *p) {
  if (errors) return;
  if (trace) printNode(p, stdout, yynames);
  fprintf(yyout, pfTEXT pfALIGN pfGLOBL pfLABEL, "_main", pfFUNC, "_main");
  if (!yyselect(p) && trace) fprintf(stderr, "selection successful\n");
  fprintf(yyout, pfIMM pfPOP pfRET pfDATA, 0);
  IDevery(data,0);
  fprintf(yyout, pfEXTRN pfEXTRN pfEXTRN pfEXTRN,
  		"_prints", "_printi", "_println", "_readi");
}

#ifndef NOTRACE
static void yytrace(NODEPTR_TYPE p, int eruleno, int cost, int bestcost)
{
	int op = OP_LABEL(p);
	YYCONST char *tname = yytermname[op] ? yytermname[op] : "?";
	if (debugNode) fprintf(stderr, "0x%lx:%s matched %s with cost %d vs. %d\n", (long)p, tname, yystring[eruleno], cost, bestcost);
	if (cost >= MAX_COST && bestcost >= MAX_COST) {
		fprintf(stderr, "0x%lx:%s NO MATCH %s with cost %d vs. %d\n", (long)p, tname, yystring[eruleno], cost, bestcost);
		printNode(p, stderr, yynames);
	}
}
#endif
